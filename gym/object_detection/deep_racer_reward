
from object_detection.yolo import YOLO
import numpy as np
from scipy.spatial.distance import euclidean


class DeepRacerImageProcessing():

    def __init__(self, img_size=(224,224)):
        self.img_size = img_size
        self.model = YOLO(model_image_size=self.img_size)

    def detect_object(self, img):
        return self.model.detect_image(img)

    @staticmethod
    def get_bonding_area(bounding_box):
        h = np.abs(bounding_box['top'] - bounding_box['bottom'])
        w = np.abs(bounding_box['left'] - bounding_box['right'])

        return h*w

    @staticmethod
    def get_bounding_center(bounding_box):
        x = (bounding_box['left'] + bounding_box['right']) / 2.0
        y = (bounding_box['top'] + bounding_box['bottom']) / 2.0

        return (x,y)

    def get_distance_from_img_center(self, bounding_box):
        center = DeepRacerImageProcessing.get_bounding_center(bounding_box)

        return euclidean(self.img_size/2, center)

    def find_max_object(self, detections, object_name=None):
        """
        In a iterable of detected objects finds the one with the largest bounding box
        :param object_name: the name of the object to find
                 if None, returns any object
                 else returns on of the coco list
        :param detections: list of
        :return:
        """
        max_size = 0
        max_detection = None

        for detection in detections:
            if object_name is not None and detection['object_name'] != object_name:
                continue
            current_area = DeepRacerImageProcessing.get_bonding_area(detection['bounding_box'])
            if current_area > max_size:
                max_size = current_area
                max_detection = detection

        return max_detection




